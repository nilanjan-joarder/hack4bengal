/* tslint:disable */
/* eslint-disable */
/**
 * Callchimp Public API
 * ## Introductionüëã Introducing OpenAPI spec for doing almost anything in [callchimp.ai](https://callchimp.ai). CallChimp is a Gen AI Call Center Enhancing telecommunication with GPT-driven bulk calling. It is scalable, user-friendly, and customizable. Optimized for seamless integration and usability. ## API Categoriesüìã The APIs are divided in 9 categories listed below:   - Campaigns   - Supervisors   - Lists   - Subscribers   - Calls   - Phone Numbers   - Webhooks   - Scripts   - Voices  ## API Operations‚úÖ ### Campaign Operations    - List Campaigns   - Create a Campaign   - Get Campaign by Id   - Delete Campaign by Id   - Update Campaign by Id   - Add Supervisors to Campaign by Id   - Remove Supervisors from Campaign by Id   - Upload audio file to Campaign by Id   - Search Campaign by Name or Id  ### Supervisor Operations    - List Supervisors   - Create a Supervisor   - Get Supervisor by Id   - Delete Supervisor by Id   - Update Supervisor by Id   - Send OTP to Supervisor by Id   - Verify Supervisor OTP by Id  ### List Operations    - List Lists   - Create a List   - Get List by Id   - Delete List by Id   - Update List by Id   - Search List by Name or Id   - Create Campaign with Default List  ### Subscriber Operations    - List Subscribers   - Create one or more Subscriber(s)   - Get Subscriber by Id   - Delete Subscriber by Id   - Update Subscriber by Id   - Get Subscriber by Vendor Lead Code   - Delete Subscriber by Vendor Lead Code   - Update Subscriber by Vendor Lead Code  ### Call Operations    - List Calls   - Create a Call   - Get Call by Id   - List Supervisor Inbound Calls   - Generate Call Reports  ### Phone Number Operations    - List Phone Numbers  ### Webhook Operations    - List Webhooks   - Create a Webhook   - Get Webhook by Id   - Delete Webhook by Id   - Update Webhook by Id  ### Script Operations    - List Scripts   - Create a Script   - Get Script by Id   - Delete Script by Id   - Update Script by Id  ### Voice Operations   - List Available Voices  ## Authenticationüîê Callchimp public API offers authentication with API Keys. All endpoints accepts a header named `x-api-key`. To get started follow the below steps:    1. Login to callchimp dashboard.   2. Click on your profile on the top-right corner.   3. Click on Settings.   4. On the settings page, click on `API Keys` tab.   5. Click on `Create` button, add a name and an expiry date and click on `Add`.   6. An API Key will be generated, please save the key somewhere safe as it won\'t be shown again!   7. You can use the API Key directly here in this playground to test out the APIs. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Model4XXResponse,
  SubscriberListResponse,
  SubscriberResponse,
  SubscriberUpdateRequest,
  SubscribersPost200Response,
  SubscribersPostRequest,
} from '../models/index';
import {
    Model4XXResponseFromJSON,
    Model4XXResponseToJSON,
    SubscriberListResponseFromJSON,
    SubscriberListResponseToJSON,
    SubscriberResponseFromJSON,
    SubscriberResponseToJSON,
    SubscriberUpdateRequestFromJSON,
    SubscriberUpdateRequestToJSON,
    SubscribersPost200ResponseFromJSON,
    SubscribersPost200ResponseToJSON,
    SubscribersPostRequestFromJSON,
    SubscribersPostRequestToJSON,
} from '../models/index';

export interface SubscribersDeleteRequest {
    id: number;
}

export interface SubscribersGetRequest {
    id: number;
}

export interface SubscribersListRequest {
    page?: number;
}

export interface SubscribersPostOperationRequest {
    subscribersPostRequest: SubscribersPostRequest;
    call?: boolean;
}

export interface SubscribersUpdateRequest {
    id: number;
    subscriberUpdateRequest: SubscriberUpdateRequest;
}

export interface SubscribersVendorDeleteRequest {
    vendorLeadCode: string;
}

export interface SubscribersVendorGetRequest {
    vendorLeadCode: string;
}

export interface SubscribersVendorUpdateRequest {
    vendorLeadCode: string;
    subscriberUpdateRequest: SubscriberUpdateRequest;
}

/**
 * 
 */
export class SubscribersApi extends runtime.BaseAPI {

    /**
     * 
     * Delete Subscriber by Id
     */
    async subscribersDeleteRaw(requestParameters: SubscribersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling subscribersDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/subscribers/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete Subscriber by Id
     */
    async subscribersDelete(requestParameters: SubscribersDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscribersDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Get Subscriber by Id
     */
    async subscribersGetRaw(requestParameters: SubscribersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriberResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling subscribersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/subscribers/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriberResponseFromJSON(jsonValue));
    }

    /**
     * 
     * Get Subscriber by Id
     */
    async subscribersGet(requestParameters: SubscribersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriberResponse> {
        const response = await this.subscribersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * List Subscribers
     */
    async subscribersListRaw(requestParameters: SubscribersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriberListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/subscribers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriberListResponseFromJSON(jsonValue));
    }

    /**
     * 
     * List Subscribers
     */
    async subscribersList(requestParameters: SubscribersListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriberListResponse> {
        const response = await this.subscribersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Create one or more Subscriber(s)
     */
    async subscribersPostRaw(requestParameters: SubscribersPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscribersPost200Response>> {
        if (requestParameters['subscribersPostRequest'] == null) {
            throw new runtime.RequiredError(
                'subscribersPostRequest',
                'Required parameter "subscribersPostRequest" was null or undefined when calling subscribersPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['call'] != null) {
            queryParameters['call'] = requestParameters['call'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/subscribers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscribersPostRequestToJSON(requestParameters['subscribersPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscribersPost200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     * Create one or more Subscriber(s)
     */
    async subscribersPost(requestParameters: SubscribersPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscribersPost200Response> {
        const response = await this.subscribersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update Subscriber by Id
     */
    async subscribersUpdateRaw(requestParameters: SubscribersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriberResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling subscribersUpdate().'
            );
        }

        if (requestParameters['subscriberUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'subscriberUpdateRequest',
                'Required parameter "subscriberUpdateRequest" was null or undefined when calling subscribersUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/subscribers/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriberUpdateRequestToJSON(requestParameters['subscriberUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriberResponseFromJSON(jsonValue));
    }

    /**
     * 
     * Update Subscriber by Id
     */
    async subscribersUpdate(requestParameters: SubscribersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriberResponse> {
        const response = await this.subscribersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Delete Subscriber by Vendor Lead Code
     */
    async subscribersVendorDeleteRaw(requestParameters: SubscribersVendorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['vendorLeadCode'] == null) {
            throw new runtime.RequiredError(
                'vendorLeadCode',
                'Required parameter "vendorLeadCode" was null or undefined when calling subscribersVendorDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/subscribers/vendor/{vendor_lead_code}`.replace(`{${"vendor_lead_code"}}`, encodeURIComponent(String(requestParameters['vendorLeadCode']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete Subscriber by Vendor Lead Code
     */
    async subscribersVendorDelete(requestParameters: SubscribersVendorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscribersVendorDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Get Subscriber by Vendor Lead Code
     */
    async subscribersVendorGetRaw(requestParameters: SubscribersVendorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubscriberResponse>>> {
        if (requestParameters['vendorLeadCode'] == null) {
            throw new runtime.RequiredError(
                'vendorLeadCode',
                'Required parameter "vendorLeadCode" was null or undefined when calling subscribersVendorGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/subscribers/vendor/{vendor_lead_code}`.replace(`{${"vendor_lead_code"}}`, encodeURIComponent(String(requestParameters['vendorLeadCode']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubscriberResponseFromJSON));
    }

    /**
     * 
     * Get Subscriber by Vendor Lead Code
     */
    async subscribersVendorGet(requestParameters: SubscribersVendorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubscriberResponse>> {
        const response = await this.subscribersVendorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update Subscriber by Vendor Lead Code
     */
    async subscribersVendorUpdateRaw(requestParameters: SubscribersVendorUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubscriberResponse>>> {
        if (requestParameters['vendorLeadCode'] == null) {
            throw new runtime.RequiredError(
                'vendorLeadCode',
                'Required parameter "vendorLeadCode" was null or undefined when calling subscribersVendorUpdate().'
            );
        }

        if (requestParameters['subscriberUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'subscriberUpdateRequest',
                'Required parameter "subscriberUpdateRequest" was null or undefined when calling subscribersVendorUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/subscribers/vendor/{vendor_lead_code}`.replace(`{${"vendor_lead_code"}}`, encodeURIComponent(String(requestParameters['vendorLeadCode']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriberUpdateRequestToJSON(requestParameters['subscriberUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubscriberResponseFromJSON));
    }

    /**
     * 
     * Update Subscriber by Vendor Lead Code
     */
    async subscribersVendorUpdate(requestParameters: SubscribersVendorUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubscriberResponse>> {
        const response = await this.subscribersVendorUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
